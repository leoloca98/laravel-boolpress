APPUNTI PER ESERCIZIO 'laravel-boolpress':

COMMAND:
- 'npm run dev' -> per compilare manualmente ogni volta
- 'npm run watch' -> per far compilare a vs 
- 'php artisan make:seeder NomeSeeder' -> per creare un seeder

SEEDER:
// $posts = [
        //     ['title' => 'My third Post', 'content' => 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.'],
        //     ['title' => 'My fourth Post', 'content' => 'There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.'],
        // ];

        // foreach ($posts as $post) {
        //     $newPost = new Post();

        //     $newPost->fill($post);

        //     // $newPost->title = $post['title'];
        //     // $newPost->content = $post['content'];

        //     $newPost->slug = Str::slug($newPost->title, '-');

        //     $newPost->save();
        // }


RELAZIONI:
Per gestire la foreign key usiamo ovviamente le migration.
In poche parole creiamo una colonna dentro alla tabella dei "molti" a cui associamo una foreign key.
Usiamo la funzione ->constrained() solo se voglia seguire le convenzioni. (non possiamo modificare il nome della tabella ne la referenza)
Le relazioni si mettono tra modelli. Una volta fatto si creeranno anche nel database


1) ONE-TO-ONE
funzione ->hasOne() per definire che c'Ã¨ solo una relazione
funzione ->belongsTo() per definire la relazione inversa. Per definire la predominanza


2) ONE-TO-MANY
funzione ->hasMany() per definire la relazione uno a molti. (Relazione 1)
funzione ->belongsTo() per definire la relazione inversa. (Relazione Molti)


3) MANY-TO-MANY

